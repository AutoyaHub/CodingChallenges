name: 🚀 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Job 1: Validate Repository Structure
  validate-structure:
    name: 📁 Validate Repository Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Directory Structure
        run: |
          echo "🔍 Validating repository structure..."
          
          # Check required directories exist
          required_dirs=("backend" "frontend" "fullstack" "logic" "submissions" "templates")
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "❌ Missing required directory: $dir"
              exit 1
            fi
            echo "✅ Found directory: $dir"
          done
          
          # Check for README files in challenges
          echo "🔍 Checking for README files in challenge directories..."
          readme_count=0
          for category in backend frontend fullstack logic; do
            if [ -d "$category" ]; then
              for challenge_dir in "$category"/*; do
                if [ -d "$challenge_dir" ]; then
                  readme_file="$challenge_dir/README.md"
                  if [ -f "$readme_file" ]; then
                    echo "✅ Found README: $readme_file"
                    ((readme_count++))
                  else
                    echo "⚠️  Missing README: $readme_file"
                  fi
                fi
              done
            fi
          done
          
          echo "📊 Found $readme_count README files in challenge directories"
          echo "🎉 Repository structure validation completed!"

  # Job 2: Lint Documentation
  lint-docs:
    name: 📝 Lint Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Lint Markdown Files
        run: |
          echo "🔍 Linting Markdown files..."
          markdownlint README.md CONTRIBUTING.md || true
          find . -name "README.md" -not -path "./node_modules/*" | xargs markdownlint || true
          echo "📝 Markdown linting completed"

  # Job 3: Test Python Challenges
  test-python:
    name: 🐍 Test Python Challenges
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8 black isort mypy

      - name: Find and Test Python Challenges
        run: |
          echo "🔍 Finding Python challenges..."
          
          # Find all directories with requirements.txt
          challenge_dirs=$(find . -name "requirements.txt" -not -path "./node_modules/*" -not -path "./.git/*" | xargs dirname)
          
          for dir in $challenge_dirs; do
            echo "📦 Testing challenge in: $dir"
            cd "$dir"
            
            # Install challenge-specific dependencies
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt || echo "⚠️ Failed to install requirements for $dir"
            fi
            
            # Run tests if they exist
            if [ -d "tests" ]; then
              echo "🧪 Running tests for $dir"
              python -m pytest tests/ -v || echo "⚠️ Tests failed for $dir"
            fi
            
            # Run flake8 linting
            if find . -name "*.py" | head -1 > /dev/null; then
              echo "🔍 Linting Python code in $dir"
              flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Linting issues found in $dir"
            fi
            
            cd - > /dev/null
          done

      - name: Test Example Solutions
        run: |
          echo "🧪 Testing example solutions..."
          if [ -d "solutions" ]; then
            cd solutions
            for solution in *.py; do
              if [ -f "$solution" ]; then
                echo "Testing $solution"
                python -m py_compile "$solution" || echo "⚠️ Compilation error in $solution"
              fi
            done
            cd ..
          fi

  # Job 4: Test Node.js Challenges
  test-nodejs:
    name: 🟢 Test Node.js Challenges
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Find and Test Node.js Challenges
        run: |
          echo "🔍 Finding Node.js challenges..."
          
          # Find all directories with package.json
          package_files=$(find . -name "package.json" -not -path "./node_modules/*" -not -path "./.git/*" 2>/dev/null || echo "")
          
          if [ -z "$package_files" ]; then
            echo "ℹ️  No Node.js challenges found (no package.json files)"
            echo "✅ Node.js validation completed - no projects to test"
            exit 0
          fi
          
          challenge_dirs=$(echo "$package_files" | xargs dirname)
          
          for dir in $challenge_dirs; do
            echo "📦 Testing challenge in: $dir"
            cd "$dir"
            
            # Install dependencies
            if [ -f "package.json" ]; then
              npm ci || npm install || echo "⚠️ Failed to install dependencies for $dir"
              
              # Run tests if available
              if npm run test --silent > /dev/null 2>&1; then
                echo "🧪 Running tests for $dir"
                npm test || echo "⚠️ Tests failed for $dir"
              fi
              
              # Run linting if available
              if npm run lint --silent > /dev/null 2>&1; then
                echo "🔍 Linting code in $dir"
                npm run lint || echo "⚠️ Linting issues found in $dir"
              fi
              
              # Check TypeScript compilation if applicable
              if [ -f "tsconfig.json" ]; then
                echo "🔧 Checking TypeScript compilation"
                npx tsc --noEmit || echo "⚠️ TypeScript compilation issues in $dir"
              fi
            fi
            
            cd - > /dev/null
          done

  # Job 5: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Link Checking
  check-links:
    name: 🔗 Check Links
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install markdown-link-check
        run: npm install -g markdown-link-check

      - name: Check Links in Documentation
        run: |
          echo "🔍 Checking links in documentation..."
          
          # Create a basic config if it doesn't exist
          mkdir -p .github
          if [ ! -f ".github/link-check-config.json" ]; then
            cat > .github/link-check-config.json << 'EOF'
          {
            "ignorePatterns": [
              {
                "pattern": "^http://localhost"
              },
              {
                "pattern": "^https://localhost"
              }
            ],
            "timeout": "30s",
            "retryOn429": true,
            "retryCount": 3,
            "fallbackRetryDelay": "30s",
            "aliveStatusCodes": [200, 206]
          }
          EOF
          fi
          
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "Checking links in: $file"
            markdown-link-check "$file" --config .github/link-check-config.json || echo "⚠️ Link issues found in $file"
          done

  # Job 7: Basic Challenge Validation
  validate-challenges:
    name: ✅ Validate Challenges
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Count and Validate Basic Structure
        run: |
          echo "🔍 Basic challenge validation..."
          
          # Simple validation - just count challenges and check basic structure
          total_challenges=0
          for category in backend frontend fullstack logic; do
            if [ -d "$category" ]; then
              category_count=$(find "$category" -mindepth 1 -maxdepth 1 -type d | wc -l)
              echo "📁 $category: $category_count challenges"
              total_challenges=$((total_challenges + category_count))
            fi
          done
          
          echo "📊 Total challenges: $total_challenges"
          
          # Check README files exist
          readme_count=$(find backend frontend fullstack logic -name "README.md" 2>/dev/null | wc -l)
          echo "📄 README files: $readme_count"
          
          echo "✅ Basic validation completed!" 