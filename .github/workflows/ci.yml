name: üöÄ Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Job 1: Validate Repository Structure
  validate-structure:
    name: üìÅ Validate Repository Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Directory Structure
        run: |
          echo "üîç Validating repository structure..."
          
          # Check required directories exist
          required_dirs=("backend" "frontend" "fullstack" "logic" "submissions" "templates")
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Missing required directory: $dir"
              exit 1
            fi
            echo "‚úÖ Found directory: $dir"
          done
          
          # Check for README files in challenges
          find backend frontend fullstack logic -name "README.md" | while read readme; do
            if [ ! -f "$readme" ]; then
              echo "‚ùå Missing README: $readme"
              exit 1
            fi
            echo "‚úÖ Found README: $readme"
          done
          
          echo "üéâ Repository structure validation passed!"

  # Job 2: Lint Documentation
  lint-docs:
    name: üìù Lint Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Lint Markdown Files
        run: |
          echo "üîç Linting Markdown files..."
          markdownlint README.md CONTRIBUTING.md || true
          find . -name "README.md" -not -path "./node_modules/*" | xargs markdownlint || true
          echo "üìù Markdown linting completed"

  # Job 3: Test Python Challenges
  test-python:
    name: üêç Test Python Challenges
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8 black isort mypy

      - name: Find and Test Python Challenges
        run: |
          echo "üîç Finding Python challenges..."
          
          # Find all directories with requirements.txt
          challenge_dirs=$(find . -name "requirements.txt" -not -path "./node_modules/*" -not -path "./.git/*" | xargs dirname)
          
          for dir in $challenge_dirs; do
            echo "üì¶ Testing challenge in: $dir"
            cd "$dir"
            
            # Install challenge-specific dependencies
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt || echo "‚ö†Ô∏è Failed to install requirements for $dir"
            fi
            
            # Run tests if they exist
            if [ -d "tests" ]; then
              echo "üß™ Running tests for $dir"
              python -m pytest tests/ -v || echo "‚ö†Ô∏è Tests failed for $dir"
            fi
            
            # Run flake8 linting
            if find . -name "*.py" | head -1 > /dev/null; then
              echo "üîç Linting Python code in $dir"
              flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è Linting issues found in $dir"
            fi
            
            cd - > /dev/null
          done

      - name: Test Example Solutions
        run: |
          echo "üß™ Testing example solutions..."
          if [ -d "solutions" ]; then
            cd solutions
            for solution in *.py; do
              if [ -f "$solution" ]; then
                echo "Testing $solution"
                python -m py_compile "$solution" || echo "‚ö†Ô∏è Compilation error in $solution"
              fi
            done
            cd ..
          fi

  # Job 4: Test Node.js Challenges
  test-nodejs:
    name: üü¢ Test Node.js Challenges
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Find and Test Node.js Challenges
        run: |
          echo "üîç Finding Node.js challenges..."
          
          # Find all directories with package.json
          challenge_dirs=$(find . -name "package.json" -not -path "./node_modules/*" -not -path "./.git/*" | xargs dirname)
          
          for dir in $challenge_dirs; do
            echo "üì¶ Testing challenge in: $dir"
            cd "$dir"
            
            # Install dependencies
            if [ -f "package.json" ]; then
              npm ci || npm install || echo "‚ö†Ô∏è Failed to install dependencies for $dir"
              
              # Run tests if available
              if npm run test --silent > /dev/null 2>&1; then
                echo "üß™ Running tests for $dir"
                npm test || echo "‚ö†Ô∏è Tests failed for $dir"
              fi
              
              # Run linting if available
              if npm run lint --silent > /dev/null 2>&1; then
                echo "üîç Linting code in $dir"
                npm run lint || echo "‚ö†Ô∏è Linting issues found in $dir"
              fi
              
              # Check TypeScript compilation if applicable
              if [ -f "tsconfig.json" ]; then
                echo "üîß Checking TypeScript compilation"
                npx tsc --noEmit || echo "‚ö†Ô∏è TypeScript compilation issues in $dir"
              fi
            fi
            
            cd - > /dev/null
          done

  # Job 5: Security Scan
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Link Checking
  check-links:
    name: üîó Check Links
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install markdown-link-check
        run: npm install -g markdown-link-check

      - name: Check Links in Documentation
        run: |
          echo "üîç Checking links in documentation..."
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "Checking links in: $file"
            markdown-link-check "$file" --config .github/link-check-config.json || echo "‚ö†Ô∏è Link issues found in $file"
          done

  # Job 7: Challenge Validation
  validate-challenges:
    name: ‚úÖ Validate Challenges
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate Challenge Structure
        run: |
          echo "üîç Validating challenge structure..."
          
          python3 << 'EOF'
          import os
          import json
          import re
          
          def validate_challenge_readme(path):
              """Validate that a challenge README has required sections"""
              required_sections = [
                  "Overview", "Problem Statement", "Requirements", 
                  "Getting Started", "Testing", "Evaluation Criteria"
              ]
              
              with open(path, 'r') as f:
                  content = f.read()
              
              missing_sections = []
              for section in required_sections:
                  if section.lower() not in content.lower():
                      missing_sections.append(section)
              
              if missing_sections:
                  print(f"‚ùå {path} missing sections: {missing_sections}")
                  return False
              
              print(f"‚úÖ {path} has all required sections")
              return True
          
          def validate_difficulty_badge(path):
              """Check if README has difficulty badge"""
              with open(path, 'r') as f:
                  content = f.read()
              
              if 'Difficulty' in content and '‚≠ê' in content:
                  print(f"‚úÖ {path} has difficulty badge")
                  return True
              else:
                  print(f"‚ö†Ô∏è {path} missing difficulty badge")
                  return False
          
          # Find all challenge READMEs
          challenge_dirs = ['backend', 'frontend', 'fullstack', 'logic']
          all_valid = True
          
          for category in challenge_dirs:
              if os.path.exists(category):
                  for item in os.listdir(category):
                      challenge_path = os.path.join(category, item)
                      readme_path = os.path.join(challenge_path, 'README.md')
                      
                      if os.path.isdir(challenge_path) and os.path.exists(readme_path):
                          print(f"\nüìã Validating {readme_path}")
                          if not validate_challenge_readme(readme_path):
                              all_valid = False
                          validate_difficulty_badge(readme_path)
          
          if not all_valid:
              print("\n‚ùå Some challenges need attention")
              exit(1)
          else:
              print("\nüéâ All challenges validated successfully!")
          EOF

  # Job 8: Generate Report
  generate-report:
    name: üìä Generate Quality Report
    runs-on: ubuntu-latest
    needs: [validate-structure, lint-docs, test-python, test-nodejs, validate-challenges]
    if: always()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Quality Report
        run: |
          echo "üìä Generating Quality Report"
          
          cat > quality-report.md << 'EOF'
          # üìä Repository Quality Report
          
          Generated on: $(date)
          
          ## üîç Validation Results
          
          | Check | Status |
          |-------|--------|
          | Repository Structure | ${{ needs.validate-structure.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Documentation Linting | ${{ needs.lint-docs.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Python Tests | ${{ needs.test-python.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Node.js Tests | ${{ needs.test-nodejs.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          | Challenge Validation | ${{ needs.validate-challenges.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
          
          ## üìà Statistics
          
          - **Challenges**: $(find backend frontend fullstack logic -mindepth 1 -maxdepth 1 -type d | wc -l)
          - **README Files**: $(find . -name "README.md" | wc -l)
          - **Python Files**: $(find . -name "*.py" | wc -l)
          - **JavaScript/TypeScript Files**: $(find . \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) | wc -l)
          
          ---
          *Report generated by GitHub Actions CI/CD pipeline*
          EOF
          
          echo "üìã Quality report generated"
          cat quality-report.md

      - name: Upload Quality Report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: quality-report.md

  # Job 9: Deploy Documentation (on main branch)
  deploy-docs:
    name: üìö Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [validate-structure, validate-challenges]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install MkDocs
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

      - name: Build Documentation
        run: |
          echo "üìö Building documentation..."
          # Create mkdocs.yml if it doesn't exist
          if [ ! -f "mkdocs.yml" ]; then
            cat > mkdocs.yml << 'EOF'
          site_name: Autoya Coding Challenges
          site_description: World-class coding challenges for software engineers
          site_url: https://autoyahub.github.io/CodingChallenges/
          
          theme:
            name: material
            palette:
              primary: blue
              accent: light-blue
            features:
              - navigation.tabs
              - navigation.sections
              - toc.integrate
              - search.highlight
          
          plugins:
            - search
            - mermaid2
          
          nav:
            - Home: index.md
            - Backend Challenges: backend/
            - Frontend Challenges: frontend/
            - Full-Stack Challenges: fullstack/
            - Logic Challenges: logic/
            - Contributing: CONTRIBUTING.md
          EOF
          fi
          
          mkdocs build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site 